-- insomnia test flags:
-- eval: False
Prelude = module {
  data Bool = True | False
  data Order = Lt | Eq | Gt
  
}

EQ = module type {
  type T : *
  sig eq : T -> T -> Prelude.Bool
}

ORD = module type {
  type T : *
  Eq : EQ where type T = T
  sig compare : T -> T -> Prelude.Order
}

IntOrd = assume (ORD where type T = Int)

BoolOrd : (ORD where type T = Prelude.Bool) = module {
  type T = Prelude.Bool
  Eq = module {
    type T = T
    fun eq x y =
      case {x = x, y = y} of
        ({x = Prelude.True, y = Prelude.True}) -> Prelude.True
        ({x = Prelude.False, y = Prelude.False}) -> Prelude.True
        _ -> Prelude.False
  }

  fun compare x y =
    case {x = x, y = y} of
      ({x = Prelude.False, y = Prelude.True}) -> Prelude.Lt
      ({x = Prelude.True, y = Prelude.False}) -> Prelude.Gt
      _ -> Prelude.Eq
}

X = module {
  sig f : Int -> Int -> Prelude.Bool
  fun f x y = IntOrd.Eq.eq x y
}

POINT = module type {
  type T : *
  sig x : T
}

F = (module M : POINT
     module Z : EQ where type T = M.T ) -> module {
  type T = M.T
  val p = Z.eq M.x
}

IntPoint : (POINT where type T = Int) = module {
  type T = Int
  val x = 0
}

R = F (IntPoint, IntOrd.Eq)