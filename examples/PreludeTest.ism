
import "examples/Prelude.ism" (module Prelude
                               module type FUNCTOR)

Lists = module {
  data List (a : *) = Nil | Cons a (List a)
  Functor : (FUNCTOR where type T = List) = module {
    type T = List
    sig map : forall (a : *) (b : *) . (a -> b) -> List a -> List b
    fun map f xs =
      case xs of
        Nil -> Nil
        (Cons x xs1) -> Cons (f x) (map f xs1)
  }
}

TestArith = module {

  import Prelude

  -- sig x : Bool
  val x =
    case (1 + 1) < 3 of
      True -> False
      False -> True

}

TestFlip = model {
  val coin1 ~ Prelude.flip 0.5
  val r ~ Prelude.uniform { lo = 0.0 , hi = 1.0 }
}

query sample TestFlip 3