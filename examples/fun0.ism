
module type T1 {
  type T :: *
  sig f :: T -> T
  sig v :: T
}

module X1 :: T1 {
  type T = Int
  fun f x = (x :: Int)
  val v = 0
}

module type FT = (module P :: T1) -> T1

module F (module P :: T1) = P

module X2 = F (X1)

module F2 (module P :: T1) :: T1 {
  type T = P.T
  fun f x = P.f x
  val v = P.v
}

module F3 :: FT = F