-- insomnia test flags:
-- eval: False

T1 = module type {
  type T : *
  sig f : T -> T
  sig v : T
}

X1 : T1 = module {
  type T = Int
  fun f x = (x : Int)
  val v = 0
}

FT = (P : T1) -> T1

F = (P : T1) -> P

X2 = F (X1)

F2 = (P : T1) -> (module {
  type T = P.T
  fun f x = P.f x
  val v = P.v
} : T1)

F_A : FT = F

T1_TRANSPARENT = module type {
  type T = Int
  sig f : T -> T
  sig v : T
}

FT_SUB = (P : T1_TRANSPARENT) -> T1

F_B : FT_SUB = F

F3 = (P : T1_TRANSPARENT) -> (module {
  type T = Int
  sig f : T -> T
  fun f x = 0
  val v = 0
} : T1)

F_C : FT_SUB = F3

