-- insomnia test flags:
-- eval: False

DIST_PARAMS = module type {
  type NormalParams = { μ : Real ; σ : Real }

  sig normal : NormalParams -> Dist Real
}

DistParams : DIST_PARAMS = module {
   type NormalParams = { μ : Real ; σ : Real }

   Assume = assume module type {
     sig normal : NormalParams -> Dist Real
   }
   import Assume
}

N_SIG = model type {
  sig h : Real

  sig z : Real
}

N : N_SIG = model {
  sig h : Real
  val h ~ DistParams.normal { μ = 1.0, σ = 1.0 }

  Assume = assume module type {
    parameter sig (.+) : Real -> Real -> Real
  }
  import Assume

  infixl .+ 6

  -- sig z : Real
  val z = let
    p = { μ = 1.0, σ = 1.0 }
    q = p -- (just to check that let bindings scope correctly)
    in case q of
      -- annoying parser bug here: without the parens, the parser
      -- treats the braces as beginning an explicitly delimited case block
      ({ μ = μ, σ = σ }) -> μ .+ σ
    
}
