-- * Slip example (distribution version)

-- This version uses nested distributions,
--   to describe hypothetical experiment outcomes.

-- insomnia test flags:
-- eval: False

-- basics
PRELUDE = module type {

  data Bool = True | False

  sig (+) : Int -> Int -> Int
  sig (-) : Int -> Int -> Int

  sig isZero : Int -> Bool

  data List (a : *) = Nil | Cons a (List a)

  module ListFunctor {
    sig map : forall (a : *) (b : *) . (a -> b) -> List a -> List b
  }

}

-- assume the prelude exists
Prelude = assume PRELUDE

-- a collection of standard distributions
DISTS = module type {

  sig uniformInt : { lo : Int ; hi : Int } -> Dist Int

}

Dists = assume DISTS

-- interesting utilities about dice
Dice = module {

  data Die = D4 | D6 | D8 | D10 | D12 | D20

  sig rollDie : Die -> Dist Int
  fun rollDie d =
    case d of
      D4  -> Dists.uniformInt { lo = 1 , hi = 4}
      D6  -> Dists.uniformInt { lo = 1 , hi = 6}
      D8  -> Dists.uniformInt { lo = 1 , hi = 8}
      D10 -> Dists.uniformInt { lo = 1 , hi = 10}
      D12 -> Dists.uniformInt { lo = 1 , hi = 12}
      D20 -> Dists.uniformInt { lo = 1 , hi = 20}
}

DICE_WORLD = module type {

  -- a bag of dice represented by how one ought to draw a die from it
  type Bag = Dist Dice.Die

  -- a standard bag of dice
  sig stdBag : Bag

}

DiceWorld = assume DICE_WORLD

DiceUtil = module {

  import Prelude
  import Dice
  import DiceWorld

  sig draw : Bag -> Int -> Dist (List Die)
  fun draw bag n =
    case isZero n of
      Prelude.True -> return Prelude.Nil
      Prelude.False -> let
                 d ~ bag
                 ds ~ draw bag (n Prelude.- 1)
               in
                 return (Prelude.Cons d ds)

  sig rollDice : List Die -> Dist (List Int)
  fun rollDice dice =
    case dice of
      Prelude.Nil -> return Prelude.Nil
      (Prelude.Cons d ds) -> let
        x ~ Dice.rollDie d
        xs ~ rollDice ds
        in return (Prelude.Cons x xs)

  sig sumRolls : List Int -> Int
  fun sumRolls rs_ =
    case rs_ of
      Prelude.Nil -> 0
      (Prelude.Cons r rs) -> r + sumRolls rs

  type Joint = { numDice : Int ; diceTotals : Int }

}

-- model drawing a slip of paper from a hat
Slip = model {

  sig n : Int
  val n ~ Dists.uniformInt { lo = 1 , hi = 5 }
}

-- The dice experiment model contains a dice experiment value which
-- performs a new experiment (distribution of dice and dice rolls)
-- each time that it is sampled.  But note that the number of dice is
-- fixed upfront when the dice experiment model itself is sampled.
DIE_EXPERIMENT = model type {
  sig diceExperiment : Dist DiceUtil.Joint
}

DiceExperiment = 
  local
    import Prelude
    import Dice
    import DiceUtil
    
    S ~ Slip
  in model {

  sig diceExperiment : Dist Joint
  val diceExperiment ~ return (let
    n = S.n
    dice ~ draw stdBag n
    outcomes ~ rollDice dice
    tot = sumRolls outcomes
   in return { numDice = n, diceTotals = tot })

  } : DIE_EXPERIMENT

ONE_ROLL_EXPERIMENT = model type {
  sig outcome : DiceUtil.Joint
}

OneRollExperiment = 
  local
    import DiceUtil
    E ~ DiceExperiment
  in model {
    sig outcome : Joint
    val outcome ~ E.diceExperiment
  } : ONE_ROLL_EXPERIMENT

TWO_ROLL_EXPERIMENT = model type {
  sig outcome1 : DiceUtil.Joint
  sig outcome2 : DiceUtil.Joint
}

TwoRollExperiment =
  local
    import DiceUtil
    E ~ DiceExperiment
  in model {
    sig outcome1 : Joint
    val outcome1 ~ E.diceExperiment

    sig outcome2 : Joint
    val outcome2 ~ E.diceExperiment

    -- outcome1.n == outcome2.n  by construction of DiceExperiment
  } : TWO_ROLL_EXPERIMENT