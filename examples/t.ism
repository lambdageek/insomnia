-- insomnia test flags:
-- eval: False

model Example {
-- Example tprob file.

data Bool = True | False

-- "sig" introduces value typing annotations at the top level that is in scope
-- for the rest of the toplevel declarations.
-- We don't require a definition for every "sig" and so we can use the
-- definitions to talk about functions we haven't implemented (or which we assume are primitive)
parameter sig or : Bool -> Bool -> Bool

fun or b1 b2 =
  case b1 of
  { False -> b2
  ; _ -> True
  }

-- There's also an ASCII syntax
parameter sig id : forall (a : *) . a -> a

-- fun declarations provide a definition.
fun id x = id x

data Either (a : ⋆) (b : ⋆) = Left a | Right b

-- parameter sig withEither : forall (a : ⋆) (b : ⋆) (c ∷ ⋆)
--                  . (a -> c) -> (b -> c) -> Either a b -> c
fun withEither l r t = case t of
  { (Left x) -> l x
  ; (Right y) -> r y
  }

parameter sig compose : forall (a : ⋆) (b : ⋆) (c : ⋆)
               . (b -> c) -> (a -> b) -> a -> c
fun compose g f x = g (f x)

parameter sig fmapEither : forall (a : ⋆) (b : ⋆) (c : ⋆).
                  (b -> c) -> Either a b -> Either a c
fun fmapEither f = withEither Left (compose Right f)

-- parameter sig swap : forall (a : *) (b : *) (g : *) . a -> b -> (b -> a -> g) -> g
fun swap x y κ = κ y x

module AssumeFlip = assume {
    parameter sig flip : Real -> Dist Bool
  }
import AssumeFlip

fun h i = -- bindings are of the form v or (v : ty)
  let
    (fair : Real) = 0.5      {- value assignment -}
    (biased : Real) = 0.9
    x ~ flip fair   {- sampling from a distribution -}
    y ~ flip biased
  in return (or x y)

----- enumeration types
enum Five 5

module AssumeFive = assume {
    parameter sig eqFive : Five -> Five -> Bool
    sig one : Five

    parameter sig categorical : forall (p : * -> *) (a : *). p a -> Dist a

  }
import AssumeFive


parameter sig isOne : Five -> Bool
fun isOne x = eqFive x one


data Proxy (a : *) = ProxyC

sig individual : Five
val individual ~ categorical ProxyC

}
