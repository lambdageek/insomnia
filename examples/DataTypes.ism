-- insomnia test flags:
-- eval: False

import "examples/Prelude.ism"
  (module Prelude
   module type FUNCTOR
  )

DATA_TYPES = module type {

  data Maybe (a : *) = Nothing | Just a

  sig maybe : forall (t : *) (c : *) . c -> (t -> c) -> Maybe t -> c

  FunctorMaybe : module type { -- FUNCTOR -- where type T = Maybe
      type T = Maybe
      sig map : forall (a : *) (b : *) . (a -> b) -> T a -> T b
    }

  data List (a : *) = Nil | Cons a (List a)

  FunctorList : FUNCTOR where type T = List
}


DataTypes : DATA_TYPES = module {

  data Maybe (a : *) = Nothing | Just a

  sig maybe : forall (t : *) (c : *) . c -> (t -> c) -> Maybe t -> c
  fun maybe n j m =
    case m of
      Nothing -> n
      (Just x) -> j x

  FunctorMaybe : (FUNCTOR where type T = Maybe) = module {
    type T = Maybe
    sig map : forall (a : *) (b : *) . (a -> b) -> T a -> T b
    fun map f m =
      case m of
        Nothing -> Nothing
        (Just x) -> Just (f x)
  }

  data List (a : *) = Nil | Cons a (List a)

  FunctorList : (FUNCTOR where type T = List) = module {
    type T = List
    sig map : âˆ€ (a : *) (b : *) . (a -> b) -> List a -> List b
    fun map f xs = case xs of
      (Cons y ys) -> Cons (f y) (map f ys)
      Nil -> Nil
  }
}
