-- * Slip example (model version)

-- This version uses nested models, instead of nested distributions,
--   to describe hypothetical experiment outcomes.


-- basics
module type PRELUDE {

  data Bool = True | False

  sig (+) :: Int -> Int -> Int
  sig (-) :: Int -> Int -> Int

  sig isZero :: Int -> Bool

  data List (a :: *) = Nil | Cons a (List a)

  module ListFunctor {
    sig map :: forall (a :: *) (b :: *) . (a -> b) -> List a -> List b
  }

}

-- assume the prelude exists
module Prelude = assume PRELUDE

-- a collection of standard distributions
module type DISTS {

  sig uniformInt :: { lo :: Int ; hi :: Int } -> Dist Int

}

module Dists = assume DISTS

-- interesting utilities about dice
module Dice {

  data Die = D4 | D6 | D8 | D10 | D12 | D20

  sig rollDie :: Die -> Dist Int
  fun rollDie d =
    case d of
      D4  -> Dists.uniformInt { lo = 1 , hi = 4}
      D6  -> Dists.uniformInt { lo = 1 , hi = 6}
      D8  -> Dists.uniformInt { lo = 1 , hi = 8}
      D10 -> Dists.uniformInt { lo = 1 , hi = 10}
      D12 -> Dists.uniformInt { lo = 1 , hi = 12}
      D20 -> Dists.uniformInt { lo = 1 , hi = 20}
}

module type DICE_WORLD {

  -- a bag of dice represented by how one ought to draw a die from it
  type Bag = Dist Dice.Die

  -- a standard bag of dice
  sig stdBag :: Bag

}

module DiceWorld = assume DICE_WORLD

module DiceUtil {

  import Prelude
  import Dice
  import DiceWorld

  sig draw :: Bag -> Int -> Dist (List Die)
  fun draw bag n =
    case isZero n of
      Prelude.True -> return Prelude.Nil
      Prelude.False -> let
                 d ~ bag
                 ds ~ draw bag (n Prelude.- 1)
               in
                 return (Prelude.Cons d ds)

  sig rollDice :: List Die -> Dist (List Int)
  fun rollDice dice =
    case dice of
      Prelude.Nil -> return Prelude.Nil
      (Prelude.Cons d ds) -> let
        x ~ Dice.rollDie d
        xs ~ rollDice ds
        in return (Prelude.Cons x xs)

  sig sumRolls :: List Int -> Int
  fun sumRolls rs_ =
    case rs_ of
      Prelude.Nil -> 0
      (Prelude.Cons r rs) -> r + sumRolls rs

  type Joint = { numDice :: Int ; diceTotals :: Int }

}

-- model drawing a slip of paper from a hat
model Slip {

  sig n :: Int
  val n ~ Dists.uniformInt { lo = 1 , hi = 5 }
}

-- The outcome of running an experiment will be a pair of the number of dice and the dice total.
model type EXPERIMENT_OUTCOME_MDL {
  sig outcome :: DiceUtil.Joint
}

module type EXPERIMENT_OUTCOME {
  sig outcome :: DiceUtil.Joint
}

-- The dice experiment model contains a dice experiment value which
-- performs a new experiment (distribution of dice and dice rolls)
-- each time that it is sampled.  But note that the number of dice is
-- fixed upfront when the dice experiment model itself is sampled.
model type DIE_EXPERIMENT {
  model Outcomes :: EXPERIMENT_OUTCOME_MDL
}

model DiceExperiment =
  model
  local
    import Prelude
    import Dice
    import DiceUtil
    
    module S ~ Slip
  in {

    model Outcomes = model {
      sig outcome :: Joint
      val outcome ~ let
        n = S.n
        dice ~ draw stdBag n
        outcomes ~ rollDice dice
        tot = sumRolls outcomes
       in return { numDice = n, diceTotals = tot }
    }
  } :: DIE_EXPERIMENT

model type ONE_ROLL_EXPERIMENT {
  module Outcome :: EXPERIMENT_OUTCOME
}

model OneRollExperiment = model
  local
    module Experiment ~ DiceExperiment
  in {
    module Outcome ~ Experiment.Outcomes
  } :: ONE_ROLL_EXPERIMENT

model type TWO_ROLL_EXPERIMENT {
  module Outcome1 :: EXPERIMENT_OUTCOME
  module Outcome2 :: EXPERIMENT_OUTCOME
}

model TwoRollExperiment = model
  local
    module Experiment ~ DiceExperiment
  in {
    module Outcome1 ~ Experiment.Outcomes
    module Outcome2 ~ Experiment.Outcomes
    -- Outcome1.outcome.n == Outcome2.outcome.n  by construction of DiceExperiment
  } :: TWO_ROLL_EXPERIMENT