-- * Slip example (model version)

-- This version uses nested models, instead of nested distributions,
--   to describe hypothetical experiment outcomes.

-- insomnia test flags:
-- eval: False


-- basics
PRELUDE = module type {

  data Bool = True | False

  sig (+) : Int -> Int -> Int
  sig (-) : Int -> Int -> Int

  sig isZero : Int -> Bool

  data List (a : *) = Nil | Cons a (List a)

  ListFunctor : module type {
    sig map : forall (a : *) (b : *) . (a -> b) -> List a -> List b
  }

}

-- assume the prelude exists
Prelude = assume PRELUDE

-- a collection of standard distributions
DISTS = module type {

  sig uniformInt : { lo : Int ; hi : Int } -> Dist Int

}

Dists = assume DISTS

DICE = module type {
  data Die = D4 | D6 | D8 | D10 | D12 | D20

  -- given a die, return a distribution of rolls of that die
  sig rollDie : Die -> Dist Int

}

-- interesting utilities about dice
Dice : DICE = module {

  data Die = D4 | D6 | D8 | D10 | D12 | D20

  sig rollDie : Die -> Dist Int
  fun rollDie d =
    case d of
      D4  -> Dists.uniformInt { lo = 1 , hi = 4}
      D6  -> Dists.uniformInt { lo = 1 , hi = 6}
      D8  -> Dists.uniformInt { lo = 1 , hi = 8}
      D10 -> Dists.uniformInt { lo = 1 , hi = 10}
      D12 -> Dists.uniformInt { lo = 1 , hi = 12}
      D20 -> Dists.uniformInt { lo = 1 , hi = 20}
}

DICE_WORLD = module type {

  -- a bag of dice represented by how one ought to draw a die from it
  type Bag = Dist Dice.Die

  -- a standard bag of dice
  sig stdBag : Bag

}

DiceWorld = assume DICE_WORLD

DICE_UTIL = module type {
  sig draw : DiceWorld.Bag -> Int -> Dist (Prelude.List Dice.Die)

  sig rollDice : Prelude.List Dice.Die -> Dist (Prelude.List Int)

  sig sumRolls : Prelude.List Int -> Int

  type Joint = { numDice : Int ; diceTotals : Int }
}

DiceUtil : DICE_UTIL = module {

  import Prelude
  import Dice
  import DiceWorld

  sig draw : Bag -> Int -> Dist (List Die)
  fun draw bag n =
    case isZero n of
      Prelude.True -> return Prelude.Nil
      Prelude.False -> let
                 d ~ bag
                 ds ~ draw bag (n Prelude.- 1)
               in
                 return (Prelude.Cons d ds)

  sig rollDice : List Die -> Dist (List Int)
  fun rollDice dice =
    case dice of
      Prelude.Nil -> return Prelude.Nil
      (Prelude.Cons d ds) -> let
        x ~ Dice.rollDie d
        xs ~ rollDice ds
        in return (Prelude.Cons x xs)

  sig sumRolls : List Int -> Int
  fun sumRolls rs_ =
    case rs_ of
      Prelude.Nil -> 0
      (Prelude.Cons r rs) -> r + sumRolls rs

  type Joint = { numDice : Int ; diceTotals : Int }

}

SLIP = model type {
  sig n : Int
}

-- model drawing a slip of paper from a hat
Slip : SLIP = model {

  sig n : Int
  val n ~ Dists.uniformInt { lo = 1 , hi = 5 }
}

-- The outcome of running an experiment will be a pair of the number of dice and the dice total.
EXPERIMENT_OUTCOME_MODEL = model type {
  sig outcome : DiceUtil.Joint
}

EXPERIMENT_OUTCOME = module type {
  sig outcome : DiceUtil.Joint
}

-- The dice experiment model contains a model for generating
-- experiment outcomes (distribution of dice and dice rolls) each time
-- that it is sampled.  But note that the number of dice is fixed
-- upfront when the dice experiment model itself is sampled.
DIE_EXPERIMENT = model type {
  Outcomes : EXPERIMENT_OUTCOME_MODEL
}

DiceExperiment =
  local
    S ~ Slip
  in model {
    import DiceWorld
    import DiceUtil

    Outcomes = model {
      sig outcome : Joint
      val outcome ~ let
        n = S.n
        dice ~ draw stdBag n
        outcomes ~ rollDice dice
        tot = sumRolls outcomes
       in return { numDice = n, diceTotals = tot }
    }
  } : DIE_EXPERIMENT

ONE_ROLL_EXPERIMENT = model type {
  Outcome : EXPERIMENT_OUTCOME
}

TWO_ROLL_EXPERIMENT = model type {
  Outcome1 : EXPERIMENT_OUTCOME
  Outcome2 : EXPERIMENT_OUTCOME
}

OneRollExperiment =
  local
    Experiment ~ DiceExperiment
  in model {
    Outcome ~ Experiment.Outcomes
  } : ONE_ROLL_EXPERIMENT

TwoRollExperiment =
  local
    Experiment ~ DiceExperiment
  in model {
    Outcome1 ~ Experiment.Outcomes
    Outcome2 ~ Experiment.Outcomes
    -- Outcome1.outcome.n == Outcome2.outcome.n  by construction of DiceExperiment
  } : TWO_ROLL_EXPERIMENT


--
-- Below here are some fictional syntax that doesn't work yet.
--

-- model type ENUMERATIVE_EXPERIMENT {
--   enum type N
--   module Outcome : (val i : N) -> EXPERIMENT_OUTCOME
-- }

-- model EnumerativeExperiment (enum type N) =
--   local
--     module Experiment ~ DiceExperiment
--   in {
--     type N = N
--     
--     forall (i : N) in
--       module Outcome i ~ Experiment.Outcomes
--
--   } : ENUMERATIVE_EXPERIMENT