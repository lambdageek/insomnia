
import "examples/boot.ism" (module __BOOT)

module Prelude {
  sig (+) : Int -> Int -> Int
  fun (+) x y = __BOOT.intAdd x y

  data Bool = True | False

  fun (<) x y = __BOOT.ifIntLt x y (\ _v -> True) (\_v -> False) {}


  fun flip d = __BOOT.Distribution.choose d (return True) (return False)

  fun bernoulli d = __BOOT.Distribution.choose d (return 1) (return 0)

  fun uniform p =
    case p of
      ({ lo = lo, hi = hi }) -> __BOOT.Distribution.uniform lo hi
}
