
import "examples/boot.ism" (module __BOOT)

FUNCTOR = module type {

  type T : * -> *
  sig map : forall (a : *) (b : *) . (a -> b) -> T a -> T b

}

PRELUDE = module type {
  sig (+) : Int -> Int -> Int
  sig (+.) : Real -> Real -> Real
  sig (*.) : Real -> Real -> Real
  data Bool = True | False
  sig (||) : Bool -> Bool -> Bool
  sig (<) : Int -> Int -> Bool
  sig (<.) : Real -> Real -> Bool
  sig flip : Real -> Dist Bool
  sig bernoulli : Real -> Dist Int
  sig uniform : { lo : Real ; hi : Real } -> Dist Real
  sig normal : { μ : Real ; σ² : Real } -> Dist Real
}

Prelude : PRELUDE = module {
  fun (+) x y = __BOOT.intAdd x y
  fun (+.) x y = __BOOT.realAdd x y
  fun (*.) x y = __BOOT.realMul x y

  data Bool = True | False

  fun (||) x y = case x of { True -> True ; _ -> y }

  fun (<) x y = __BOOT.ifIntLt x y (\ _v -> True) (\_v -> False) {}

  fun (<.) x y = __BOOT.ifRealLt x y (\ _v -> True) (\_v -> False) {}



  fun flip d = __BOOT.Distribution.choose d (return True) (return False)

  fun bernoulli d = __BOOT.Distribution.choose d (return 1) (return 0)

  fun uniform p =
    case p of
      ({ lo = lo, hi = hi }) -> __BOOT.Distribution.uniform lo hi

  fun normal p =
    case p of
      ({ μ = m, σ² = s }) -> __BOOT.Distribution.normal m s
}
