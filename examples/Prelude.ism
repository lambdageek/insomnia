-- insomnia test flags:
-- eval: False

module type BUILTIN {

  sig intPlus : Int -> Int -> Int
  sig realPlus : Real -> Real -> Real
}

module BUILTIN__ = assume BUILTIN

module type FUNCTOR {
  type F : * -> *
  sig map : forall (a : *) (b : *) . (a -> b) -> F a -> F b
}

module type PRELUDE {
  sig (+) : Int -> Int -> Int
  infixl + 6

  sig (.+) : Real -> Real -> Real
  infixl .+ 6

  data Bool = True | False

  sig cond : ∀ (c : *) . Bool -> c -> c -> c

  data Maybe (a : *) = Nothing | Just a

  sig maybe : forall (t : *) (c : *) . c -> (t -> c) -> Maybe t -> c

  module FunctorMaybe : FUNCTOR -- where type F = Maybe TODO

  data List (a : *) = Nil | Cons a (List a)

  module FunctorList : FUNCTOR -- where type F = List TODO
}


module Prelude : PRELUDE {

  sig (+) : Int -> Int -> Int
  infixl + 6
  val (+) = BUILTIN__.intPlus

  sig (.+) : Real -> Real -> Real
  infixl .+ 6
  val (.+) = BUILTIN__.realPlus

  data Bool = True | False

  sig cond : ∀ (c : *) . Bool -> c -> c -> c
  fun cond b t f =
    case b of
    { True -> t
    ; False -> f
    }

  data Maybe (a : *) = Nothing | Just a

  sig maybe : forall (t : *) (c : *) . c -> (t -> c) -> Maybe t -> c
  fun maybe n j m =
    case m of
      Nothing -> n
      (Just x) -> j x

  module FunctorMaybe : FUNCTOR {
    type F = Maybe
    sig map : forall (a : *) (b : *) . (a -> b) -> F a -> F b
    fun map f m =
      case m of
        Nothing -> Nothing
        (Just x) -> Just (f x)
  }

  data List (a : *) = Nil | Cons a (List a)

  module FunctorList : FUNCTOR {
    type F = List
    sig map : ∀ (a : *) (b : *) . (a -> b) -> List a -> List b
    fun map f xs = case xs of
      (Cons y ys) -> Cons (f y) (map f ys)
      Nil -> Nil
  }
}
