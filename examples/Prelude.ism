
import "examples/boot.ism" (module __BOOT)

module type FUNCTOR {

  type T : * -> *
  sig map : forall (a : *) (b : *) . (a -> b) -> T a -> T b

}

module type PRELUDE {
  sig (+) : Int -> Int -> Int
  data Bool = True | False
  sig (<) : Int -> Int -> Bool
  sig flip : Real -> Dist Bool
  sig bernoulli : Real -> Dist Int
  sig uniform : { lo : Real ; hi : Real } -> Dist Real
}

module Prelude : PRELUDE {
  sig (+) : Int -> Int -> Int
  fun (+) x y = __BOOT.intAdd x y

  data Bool = True | False

  fun (<) x y = __BOOT.ifIntLt x y (\ _v -> True) (\_v -> False) {}


  fun flip d = __BOOT.Distribution.choose d (return True) (return False)

  fun bernoulli d = __BOOT.Distribution.choose d (return 1) (return 0)

  fun uniform p =
    case p of
      ({ lo = lo, hi = hi }) -> __BOOT.Distribution.uniform lo hi
}
