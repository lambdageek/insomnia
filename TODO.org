* Tasks
** DONE values fields without type sign aren't part of principal sig    :bug:
   #+BEGIN_EXAMPLE
     module X {
       sig x : t1
       val x = e1
       val y = e2
     }
   #+END_EXAMPLE

   The principal signature of X is ~{ val x : t1 }~ instead of the
   expected ~{val x : t1; val y : t2 }~.  This is because principal
   signature computation for a structure looks for ~sig f : t~
   declarations.  Type elaboration should insert such declarations.

   This will require a slight architectural tweak.  Currently that
   portion of the typechecking code assumes that each field
   declaration in the structure before typechecking gives rise to
   exactly one field declaration after typechecking (it uses a list of
   decls for the module and just conses the fields together).  Instead
   we should use a ~Endo [Decl]~ Monoid to allow zero or more elaborated
   declarations.

** TODO Reconcile concrete syntax with wiki examples.
   At the very least ~::~ vs ~:~ in type ascription.
** TODO Desugar mixed-model syntax into nested modules.
   [[file:src/Insomnia/SurfaceSyntax/ToAST.hs::--%20TODO:%20allow%20models%20to%20contain%20parameters][file:src/Insomnia/SurfaceSyntax/ToAST.hs::-- TODO: allow models to contain parameters]]
   #+BEGIN_EXAMPLE
   model X {
     parameter p = e
     val s ~ e'
   }
   -- becomes
   module X {
     parameter p = e
     model $Model {
       val s ~ e'
     }
   }
   -- in the rest of the program, references to X as a model now go to X.$Model
   -- note that X.s is not legal, so it's only things like sampling from X or observing it.
   #+END_EXAMPLE
** TODO Translate models to interpreter language
   [[file:src/Insomnia/Interp/ToLam.hs::--%20TODO:%20translate%20models][file:src/Insomnia/Interp/ToLam.hs::-- TODO: translate models]]
** TODO consume type annotations on parsed samples
   [[file:src/Insomnia/SurfaceSyntax/Parse.hs::mkBinding%20(v,%20_ty)%20op%20e%20%3D%20op%20v%20e%20--%20TODO:%20use%20the%20type][file:src/Insomnia/SurfaceSyntax/Parse.hs::-- TODO: use the type]]
** TODO make a special module for the builtin types
   [[file:src/Insomnia/SurfaceSyntax/ToAST.hs::--%20TODO:%20these%20really%20ought%20to%20be%20imported%20from%20somewhere,%20not%20built%20in.][file:src/Insomnia/SurfaceSyntax/ToAST.hs::-- TODO: these really ought to be imported from somewhere, not built in.]]
** TODO Resurrect infix resolution tests
   [[file:src/Insomnia/SurfaceSyntax/ToAST.hs::--%20TODO:%20make%20infix%20resolution%20tests%20executable%20again.][file:src/Insomnia/SurfaceSyntax/ToAST.hs::-- TODO: make infix resolution tests executable again.]]
** TODO Consider explicitly representing scope of Toplevel
   [[file:src/Insomnia/Toplevel.hs::--%20TODO:%20worth%20representing%20this%20stuff%20using%20Unbound%20binders?][file:src/Insomnia/Toplevel.hs::-- TODO: worth representing this stuff using Unbound binders?]]
** TODO Share datatype definition
   [[file:src/Insomnia/Typecheck/ClarifySignature.hs::--%20TODO:%20share%20the%20value%20constructors%20of%20a%20generative%20type%20definition.][file:src/Insomnia/Typecheck/ClarifySignature.hs::-- TODO: share the value constructors of a generative type definition.]]
   [[file:src/Insomnia/Typecheck/ClarifySignature.hs::--%20TODO:%20also%20need%20to%20alias%20the%20value%20constructors.%20Will%20need%20a][file:src/Insomnia/Typecheck/ClarifySignature.hs::-- TODO: also need to alias the value constructors. Will need a]]
   This is probably not too difficult internally now since value constructors are a separate datatype.
** TODO Pretty print entire Env in debugging type errors.
   [[file:src/Insomnia/Typecheck/Env.hs::--%20TODO:%20the%20rest%20of%20the%20env][file:src/Insomnia/Typecheck/Env.hs::-- TODO: the rest of the env]]
** TODO Generalize let-bound values and function declarations.
   [[file:src/Insomnia/Typecheck/Expr.hs::--%20XXX%20:%20TODO%20generalize%20uvars,%20or%20else%20freeze%20'em%20if%20we're%20going%20to][file:src/Insomnia/Typecheck/Expr.hs::-- XXX : TODO generalize uvars, or else freeze 'em if we're going to]]
   [[file:src/Insomnia/Typecheck/Module.hs::--%20XXX%20TODO:%20generalize%20here.%20Or%20else%20decree%20that][file:src/Insomnia/Typecheck/Module.hs::-- XXX TODO: generalize here. Or else decree that]]

   But maybe not.  Folk wisdom is that programmers don't mind putting
   in type annotations for truly polymorphic local bindings.

   The story is dodgier for toplevel bindings, but perhaps it's okay for these also to require a signature.

** TODO Ensure there are no duplicate fields in a module.
   [[file:src/Insomnia/Typecheck/ModuleType.hs::--%20TODO:%20actually%20check%20that%20the%20field%20names%20are%20unique.][file:src/Insomnia/Typecheck/ModuleType.hs::-- TODO: actually check that the field names are unique.]]
** TODO Add row polymorphism?
   [[file:src/Insomnia/Types.hs::data%20Rows%20%3D%20Rows%20--%20TODO][file:src/Insomnia/Types.hs::data Rows = Rows -- TODO]]
** DONE Infix syntax

   Parse to full application, understand fixity declarations, parse
   with precedence to disambiguate applications.

   Use exact rationals for precedence, not integers!

** DONE Tabled declaration ~for~ syntax

   #+BEGIN_EXAMPLE
   forall i : t1  in
     f i ~ e i
   #+END_EXAMPLE

** TODO Analysis to rule out inductive data types.

   Unless they turn out to be useful, in which case we will need to
   understand their semantics.

** TODO parsing record pattern matching and explicit braces             :bug:
   #+BEGIN_EXAMPLE
     case e of
       { f1 = p1, f2 = p2 } -> e
   #+END_EXAMPLE

  The parser sees the above as an explicitly-delimited pattern list.  ~case e of { pat1 ; pat2 }~.
  So we get a parse error about the leftmost ~=~.

  The workaround is to write

  #+BEGIN_EXAMPLE
    case e of
      ({ f1 = p1, f2 = p2 }) -> e
  #+END_EXAMPLE

  If bare record types (without a datatype wrapped around them) are going to be common, this
  may get very annoying.

** TODO simplify infix operator resolution
   Assuming that we can lexically distinguish values, constructors and operators,
   we should have a better representation of fixity declarations in the ToAST module.
   [[file:src/Insomnia/SurfaceSyntax/ToAST.hs::--%20TODO:%20this%20is%20horrible.%20rethink%20how%20we%20resolve%20associativity%20and%20precedence.][file:src/Insomnia/SurfaceSyntax/ToAST.hs::-- TODO: this is horrible. rethink how we resolve associativity and precedence.]]
   [[file:src/Insomnia/SurfaceSyntax/ToAST.hs::--%20TODO:%20we%20should%20handle%20default%20fixity%20in%20a%20more%20principled%20way.][file:src/Insomnia/SurfaceSyntax/ToAST.hs::-- TODO: we should handle default fixity in a more principled way.]]
* Ideas about syntax

  http://ppaml.cs.tufts.edu/Sean%E2%80%99s%20simple%20model%20notation

** Abstraction of model

  sbs: It would be helpful to separate the model from the query form and from
    the definitions of the observations.


** Example:

  -- this is a big joint distribution (with some kinda ML-module like
  -- dependent record type) called "T"

  dist T is
     N ∷ ℕ
     type classes ∷ enum N
     - mu' ∷ ℝ
     - σ' ∷ ℝ⁺
     M ∷ ℕ
     type object ∷ enum M
     class ∷ object → classes
     awesomeness ∷ object → ℝ
     mu ∷ classes → ℝ
     σ ∷ classes → ℝ⁺

  the model gives the joint distribution over this type.
  there might be nuisance variables that noone will condition or query on.

  this might be the /model type/.   And we may want to mark μ' and σ' distinctly
  since they will not be exposed from the model type.

  This is akin to a ML module.

  There is a step here (not yet shown) to turn it into a conditional
  distribution.

  Two observation forms:

  observe (P :: T → Bool) :: (Dist T → Dist T)

  observe v (where v is a value (of type T?) for some restricted set
            of types T.  Maybe just polynomials of Int and Real)


  Actually the idea is more like a type-directed operator "observe τ" where τ is the type
  of some path into a model.  Given by a judgment  ⌜T⊢ τ → (a → Dist T → Dist T)⌝.

** Signature ascription-like thing to represent which part of a model will be subject to observation.

  So the idea is if we have a model M with model type T, then if S is
  a super-type (dropped components) then something like "observable M
  S" means that we promise to only observe the S components.

