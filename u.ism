model type PRELUDE {
   data Bool = True | False

   sig cond :: forall (c :: *) . Bool -> c -> c -> c

  data Proxy (a :: *) = Proxy
  sig uniform :: ∀ (p :: ⋆ → ⋆) (a :: ⋆) . p a -> Dist a
  sig flip :: Real -> Dist Bool
}

model Prelude :: PRELUDE {

   data Bool = True | False

   sig cond :: forall (c :: *) . Bool -> c -> c -> c
   fun cond b t f =
      case b of
      {
        True -> t
      ; False -> f
      }

   data Proxy (a :: *) = Proxy

   sig uniform :: forall (p :: * -> *) (a :: *). p a -> Dist a
   sig flip :: Real -> Dist Bool
}

model Raining {

sig raining :: Prelude.Bool
val raining ~ (Prelude.uniform Prelude.Proxy)

enum T 10

sig thinksRain :: T -> Prelude.Bool

fun thinksRain t = let {
  forall (x :: T) in
    g x ~ Prelude.cond raining (Prelude.flip 0.9) (Prelude.flip 0.1)
  } in g t

}
