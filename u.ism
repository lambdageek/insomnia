model type PRELUDE {
   data Bool = True | False

   sig cond :: forall (c :: *) . Bool -> c -> c -> c
}

model Prelude :: PRELUDE {

   data Bool = True | False

   sig cond :: forall (c :: *) . Bool -> c -> c -> c
   fun cond b t f =
      case b of
      {
        True -> t
      ; False -> f
      }
 }

model Raining {

data Proxy (a :: *) = Proxy

sig uniform :: forall (p :: * -> *) (a :: *). p a -> Dist a

sig raining :: Prelude.Bool
val raining ~ uniform Proxy

sig flip :: Real -> Dist Prelude.Bool

enum T 10

sig thinksRain :: T -> Prelude.Bool

fun thinksRain t = let {
  forall (x :: T) in
    g x ~ Prelude.cond raining (flip 0.9) (flip 0.1)
  } in g t

}
